import { describe, it, expect, vi, beforeEach } from 'vitest';
import '@testing-library/jest-dom';

import { render, screen } from '@testing-library/react';
import { ChakraProvider } from '@chakra-ui/react';
import KeyInfoBar from './KeyInfoBar';
import { ThemeColorProvider } from '../../context/ThemeColorContext';

// Mock Auth0
vi.mock('@auth0/auth0-react', () => ({
  useAuth0: () => ({
    isAuthenticated: false,
    user: null,
    isLoading: false,
    getAccessTokenSilently: vi.fn().mockResolvedValue('mock-token'),
  }),
}));

// Mock useUserProfile
vi.mock('../../hooks/useUserProfile', () => ({
  useUserProfile: () => ({
    profile: null,
    favoriteConstructor: null,
    favoriteDriver: null,
    loading: false,
  }),
}));

// Mock useAiDriverFunFacts
vi.mock('../../hooks/useAiDriverFunFacts', () => ({
  useAiDriverFunFacts: () => ({
    data: {
      facts: ['Fun fact 1', 'Fun fact 2', 'Fun fact 3'],
      aiAttribution: 'Generated by AI',
      isFallback: false,
    },
    loading: false,
    error: null,
  }),
}));

// Mock Lucide React icons
vi.mock('lucide-react', () => ({
  Trophy: (props: any) => <div data-testid="trophy-icon" {...props}>Trophy</div>,
  TrendingUp: (props: any) => <div data-testid="trending-up-icon" {...props}>TrendingUp</div>,
  Calendar: (props: any) => <div data-testid="calendar-icon" {...props}>Calendar</div>,
  Medal: (props: any) => <div data-testid="medal-icon" {...props}>Medal</div>,
  Flag: (props: any) => <div data-testid="flag-icon" {...props}>Flag</div>,
  Sparkles: (props: any) => <div data-testid="sparkles-icon" {...props}>Sparkles</div>,
  AlertCircle: (props: any) => <div data-testid="alert-circle-icon" {...props}>AlertCircle</div>,
}));

function renderWithChakra(ui: React.ReactNode) {
  return render(
    <ChakraProvider>
      <ThemeColorProvider>
        {ui}
      </ThemeColorProvider>
    </ChakraProvider>
  );
}

describe('KeyInfoBar', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  const mockDriver = {
    id: 1,
    teamName: 'Red Bull Racing',
    championshipStanding: '1st',
    points: 454,
    wins: 19,
    podiums: 22,
    firstRace: {
      year: '2015',
      event: 'Australian Grand Prix'
    },
    worldChampionships: 3,
    grandsPrixEntered: 200,
  };

  it('renders without crashing', () => {
    renderWithChakra(<KeyInfoBar driver={mockDriver} />);
    
    expect(screen.getByText('Key Stats')).toBeInTheDocument();
  });

  it('renders all stat cards with correct labels', () => {
    renderWithChakra(<KeyInfoBar driver={mockDriver} />);
    
    // Check all stat labels (now using StatCard)
    expect(screen.getByText('World Championships')).toBeInTheDocument();
    expect(screen.getByText('Wins')).toBeInTheDocument();
    expect(screen.getByText('Podiums')).toBeInTheDocument();
    expect(screen.getByText('Grands Prix Entered')).toBeInTheDocument();
    expect(screen.getByText('Career Points')).toBeInTheDocument();
    expect(screen.getByText('First Race')).toBeInTheDocument();
  });

  it('renders all stat values correctly', () => {
    renderWithChakra(<KeyInfoBar driver={mockDriver} />);
    
    // Check all stat values
    expect(screen.getByText('3')).toBeInTheDocument(); // worldChampionships
    expect(screen.getByText('19')).toBeInTheDocument(); // wins
    expect(screen.getByText('22')).toBeInTheDocument(); // podiums
    expect(screen.getByText('200')).toBeInTheDocument(); // grandsPrixEntered
    expect(screen.getByText('454')).toBeInTheDocument(); // points
    expect(screen.getByText('2015')).toBeInTheDocument(); // firstRace.year
  });

  it('renders fun facts section', () => {
    renderWithChakra(<KeyInfoBar driver={mockDriver} />);
    
    expect(screen.getByText('Fun Facts')).toBeInTheDocument();
    expect(screen.getByText('Fun fact 1')).toBeInTheDocument();
    expect(screen.getByText('Fun fact 2')).toBeInTheDocument();
    expect(screen.getByText('Fun fact 3')).toBeInTheDocument();
  });

  it('renders all icons correctly', () => {
    renderWithChakra(<KeyInfoBar driver={mockDriver} />);
    
    expect(screen.getAllByTestId('trophy-icon')).toHaveLength(2); // World Championships and Wins
    expect(screen.getByTestId('medal-icon')).toBeInTheDocument();
    expect(screen.getByTestId('calendar-icon')).toBeInTheDocument();
    expect(screen.getByTestId('trending-up-icon')).toBeInTheDocument();
    expect(screen.getByTestId('flag-icon')).toBeInTheDocument();
  });

  it('handles different driver data correctly', () => {
    const differentDriver = {
      id: 2,
      teamName: 'Ferrari',
      championshipStanding: '2nd',
      points: 312,
      wins: 3,
      podiums: 15,
      firstRace: {
        year: '2021',
        event: 'Bahrain Grand Prix'
      },
      worldChampionships: 0,
      grandsPrixEntered: 80,
    };

    renderWithChakra(<KeyInfoBar driver={differentDriver} />);
    
    expect(screen.getByText('0')).toBeInTheDocument(); // worldChampionships
    expect(screen.getByText('312')).toBeInTheDocument(); // points
    expect(screen.getByText('3')).toBeInTheDocument(); // wins
    expect(screen.getByText('15')).toBeInTheDocument(); // podiums
    expect(screen.getByText('2021')).toBeInTheDocument(); // firstRace.year
    expect(screen.getByText('80')).toBeInTheDocument(); // grandsPrixEntered
  });

  it('handles zero values correctly', () => {
    const driverWithZeros = {
      id: 3,
      teamName: 'Williams',
      championshipStanding: '10th',
      points: 0,
      wins: 0,
      podiums: 0,
      firstRace: {
        year: '2020',
        event: 'Austrian Grand Prix'
      },
      worldChampionships: 0,
      grandsPrixEntered: 0,
    };

    renderWithChakra(<KeyInfoBar driver={driverWithZeros} />);
    
    // Should have multiple zeros displayed
    const zeroElements = screen.getAllByText('0');
    expect(zeroElements.length).toBeGreaterThan(0);
  });

  it('handles missing optional fields with defaults', () => {
    const minimalDriver = {
      id: 4,
      teamName: 'Haas',
      championshipStanding: '20th',
      points: 5,
      wins: 0,
      podiums: 0,
      firstRace: {
        year: '2023',
        event: 'Bahrain Grand Prix'
      },
      // worldChampionships and grandsPrixEntered are missing
    };

    renderWithChakra(<KeyInfoBar driver={minimalDriver} />);
    
    // Should default to 0 for missing fields
    expect(screen.getByText('World Championships')).toBeInTheDocument();
    expect(screen.getByText('Grands Prix Entered')).toBeInTheDocument();
  });

  it('handles long team names correctly', () => {
    const driverWithLongTeam = {
      id: 5,
      teamName: 'Aston Martin Aramco Cognizant F1 Team',
      championshipStanding: '5th',
      points: 180,
      wins: 1,
      podiums: 8,
      firstRace: {
        year: '2018',
        event: 'Australian Grand Prix'
      },
      worldChampionships: 0,
      grandsPrixEntered: 120,
    };

    renderWithChakra(<KeyInfoBar driver={driverWithLongTeam} />);
    
    // Should render without issues
    expect(screen.getByText('Key Stats')).toBeInTheDocument();
    expect(screen.getByText('180')).toBeInTheDocument();
  });

  it('handles long first race event names correctly', () => {
    const driverWithLongEvent = {
      id: 6,
      teamName: 'Alpine',
      championshipStanding: '6th',
      points: 150,
      wins: 2,
      podiums: 10,
      firstRace: {
        year: '2019',
        event: 'Formula 1 Rolex Australian Grand Prix 2023'
      },
      worldChampionships: 0,
      grandsPrixEntered: 100,
    };

    renderWithChakra(<KeyInfoBar driver={driverWithLongEvent} />);
    
    // Should render without breaking layout
    expect(screen.getByText('Key Stats')).toBeInTheDocument();
    expect(screen.getByText('2019')).toBeInTheDocument();
  });

  it('maintains proper component structure', () => {
    renderWithChakra(<KeyInfoBar driver={mockDriver} />);
    
    // Check for main sections
    expect(screen.getByText('Key Stats')).toBeInTheDocument();
    expect(screen.getByText('Fun Facts')).toBeInTheDocument();
  });

  it('renders all stat cards', () => {
    const { container } = renderWithChakra(<KeyInfoBar driver={mockDriver} />);
    
    // The component should render 6 StatCard components
    // Each StatCard has a label, so we can count unique labels
    expect(screen.getByText('World Championships')).toBeInTheDocument();
    expect(screen.getByText('Wins')).toBeInTheDocument();
    expect(screen.getByText('Podiums')).toBeInTheDocument();
    expect(screen.getByText('Grands Prix Entered')).toBeInTheDocument();
    expect(screen.getByText('Career Points')).toBeInTheDocument();
    expect(screen.getByText('First Race')).toBeInTheDocument();
  });

  it('handles special characters in team names', () => {
    const driverWithSpecialTeam = {
      id: 7,
      teamName: 'RB F1 Team (AlphaTauri)',
      championshipStanding: '12th',
      points: 20,
      wins: 0,
      podiums: 1,
      firstRace: {
        year: '2022',
        event: 'Bahrain Grand Prix'
      },
      worldChampionships: 0,
      grandsPrixEntered: 50,
    };

    renderWithChakra(<KeyInfoBar driver={driverWithSpecialTeam} />);
    
    // Should render without issues
    expect(screen.getByText('Key Stats')).toBeInTheDocument();
    expect(screen.getByText('20')).toBeInTheDocument();
  });

  it('renders consistently across multiple renders', () => {
    const { rerender } = renderWithChakra(<KeyInfoBar driver={mockDriver} />);
    
    expect(screen.getByText('Key Stats')).toBeInTheDocument();
    expect(screen.getByText('19')).toBeInTheDocument();
    
    // Rerender with same props
    rerender(
      <ChakraProvider>
        <ThemeColorProvider>
          <KeyInfoBar driver={mockDriver} />
        </ThemeColorProvider>
      </ChakraProvider>
    );
    
    expect(screen.getByText('Key Stats')).toBeInTheDocument();
    expect(screen.getByText('19')).toBeInTheDocument();
  });

  it('displays correct number of stat cards', () => {
    renderWithChakra(<KeyInfoBar driver={mockDriver} />);
    
    // Count all stat labels - should be 6
    const statLabels = [
      'World Championships',
      'Wins',
      'Podiums',
      'Grands Prix Entered',
      'Career Points',
      'First Race',
    ];
    
    statLabels.forEach(label => {
      expect(screen.getByText(label)).toBeInTheDocument();
    });
  });
});
